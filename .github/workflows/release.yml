
name: 'C++ CI'

on: 
  push:
    branches:
      - master

jobs:
  # build_windows:
  #   runs-on: windows-latest
  #   permissions: write-all
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true
  #     - name: Install SFML
  #       id: sfml
  #       uses: oprypin/install-sfml@v1
  #       with:
  #         sfml: 2.6.1 
  #         config: Release
  #     - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DSFML_DIR="${{ steps.sfml.outputs.path }}"  
  #     - run: cmake --build .
  #     - name: List files
  #       run: dir
  #     - run: |
  #         $DLL_DIR = "resources"  
  #         $dllFiles = Get-ChildItem "$DLL_DIR\*.dll"
  #         if ($dllFiles) {
  #           Copy-Item "$DLL_DIR\*.dll" ".\" -Force
  #           Write-Host "DLL files copied successfully."
  #         } else {
  #           Write-Host "No DLL files found in $DLL_DIR."
  #           exit 1
  #         }
  #     - run: cmake --build . --target package      
  #     - name: Create Release (windows)
  #       id: create_release_windows
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: windows${{ github.run_number }}
  #         release_name: Release ${{ github.run_number }} (windows)
  #         draft: false
  #         prerelease: false
  #     - name: Upload Release Asset (windows)
  #       id: upload-release-asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
  #         asset_path: ./physics-0.0.${{ github.run_number }}-win64.zip
  #         asset_name: physics-0.0.${{ github.run_number }}-win64.zip
  #         asset_content_type: application/zip
  
  build_ubuntu:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: sudo apt-get install libsfml-dev    
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target package
      - name: List files (ubuntu)
        run: ls
      - name: Create Release (ubuntu)
        id: create_release_ubuntu
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ubuntu${{ github.run_number }}
          release_name: Release ${{ github.run_number }} (ubuntu)
          draft: false
          prerelease: false 
      - name: Upload Release Asset (ubuntu)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_ubuntu.outputs.upload_url }}
          asset_path: ./physics-0.0.${{ github.run_number }}-Linux.zip
          asset_name: physics-0.0.${{ github.run_number }}-Linux.zip
          asset_content_type: application/zip


  build_macos:
    # Запускаем job на macos-latest
    runs-on: macos-latest
    # Предоставляем разрешения на запись во все ресурсы
    permissions: write-all
    steps:
      # Клонируем репозиторий, включая submodules
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: brew install sfml
      # Конфигурируем проект с помощью CMake, используя номер запуска для PATCH_VERSION
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      # Строим проект с помощью CMake
      - run: cmake --build .
      # Запускаем тесты
      - name: Run Tests
        run: |
          ctest --output-on-failure || exit 1  # Проверяем наличие тестов и их успешное выполнение
      
      # Создаем пакет
      - run: cmake --build . --target package
      # Создаем релиз для MacOS
      - name: Create Release (MacOS)
        id: create_release_macos
        # Используем action для создания релиза
        uses: actions/create-release@v1
        # Используем GITHUB_TOKEN для аутентификации
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Устанавливаем tag_name, release_name и другие параметры
        with:
          tag_name: ${{ github.run_number }} # Используем номер запуска для тега
          release_name: Release ${{ github.run_number }} (MacOS)
          draft: false # Не публикуем релиз в черновике
          prerelease: false # Не публикуем как предварительную версию
      # Загружаем релизный ассет для MacOS
      - name: Upload Release Asset (MacOS)
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_macos.outputs.upload_url }}
          asset_path: ./physics-0.0.${{ github.run_number }}-Darwin.zip
          asset_name: physics-0.0.${{ github.run_number }}-Darwin.zip
          asset_content_type: application/zip
